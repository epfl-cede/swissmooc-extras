# -*- coding: utf-8 -*-
"""
Django settings for sms_app project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'p@p8ac&7&5)v&=lv1(62#l)!6i7oko9lgtf-0nopdghhn3^njp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['matomo.test-swissmooc.ch','matomo.swissmooc.ch','127.0.0.1']
CSRF_TRUSTED_ORIGINS = ['https://matomo.test-swissmooc.ch','https://matomo.swissmooc.ch']


# Application definition

INSTALLED_APPS = [
    'migrate.apps.MigrateConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'split_logs.apps.SplitLogsConfig',
    'check_ssl.apps.CheckSslConfig',
    'openedx_stats.apps.OpenedxStatsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sms_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sms_app.wsgi.application'

INSTANCES = os.environ.get('INSTANCES', '').split(',')
SWARMS = os.environ.get('SWARMS', '').split(',')
BACKUP_SERVER = os.environ.get('BACKUP_SERVER')

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, '..', 'db.sqlite3'),
        'NAME': 'sms_extras',
        'ENGINE': 'django.db.backends.mysql',
        'USER': os.environ.get('SMSEXTRAS_MYSQL_USER', ''),
        'PASSWORD': os.environ.get('SMSEXTRAS_MYSQL_PASSWORD', ''),
        'HOST': 'localhost',
        'PORT': '3306',
    },
}

EDXAPP_DATABASES = {
    'readonly': {
        'host': os.environ.get("EDXAPP_MYSQL_HOST"),
        'user': os.environ.get("EDXAPP_MYSQL_USER"),
        'password': os.environ.get("EDXAPP_MYSQL_PASSWORD"),
        'db': 'edxapp',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


DEFAULT_AUTO_FIELD='django.db.models.AutoField'

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/utils/static/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '[%(asctime)s] %(name)-12s %(levelname)-8s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
        'logfile': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(
                '/var', 'log', 'swissmooc-extras', 'django.log'
            ),
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            # 'filters': ['special']
        }
    },
    'loggers': {
        # Redefining the logger for the `django` module
        # prevents invoking the `AdminEmailHandler`
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
        },
        '': {
            'handlers': ['logfile'],
            'propagate': True,
            'level': 'INFO',
        },
        'split_logs': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'WARNING',
        },
        'check_ssl': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'WARNING',
        },
        # 'split_logs.management.commands': {
        #     'handlers': ['mail_admins'],
        #     'propagate': False,
        #     'level': 'ERROR',
        # },
    }
}

TRACKING_LOGS_ORIGINAL_SRC=os.environ.get("TRACKING_LOGS_ORIGINAL_SRC")
TRACKING_LOGS_ORIGINAL_DST=os.environ.get("TRACKING_LOGS_ORIGINAL_DST")
TRACKING_LOGS_ORIGINAL_DOCKER_SRC=os.environ.get("TRACKING_LOGS_ORIGINAL_DOCKER_SRC")
TRACKING_LOGS_ORIGINAL_DOCKER_DST=os.environ.get("TRACKING_LOGS_ORIGINAL_DOCKER_DST")
TRACKING_LOGS_SPLITTED=os.environ.get("TRACKING_LOGS_SPLITTED")
TRACKING_LOGS_SPLITTED_DOCKER=os.environ.get("TRACKING_LOGS_SPLITTED_DOCKER")
TRACKING_LOGS_ENCRYPTED=os.environ.get("TRACKING_LOGS_ENCRYPTED")
TRACKING_LOGS_ENCRYPTED_DOCKER=os.environ.get("TRACKING_LOGS_ENCRYPTED_DOCKER")
DUMP_DB_PATH=os.environ.get("DUMP_DB_PATH")
DUMP_XML_PATH=os.environ.get("DUMP_XML_PATH")

STATS_FILE_PATH=os.environ.get("STATS_FILE_PATH")

SMS_APP_ENV=os.environ.get("SMS_APP_ENV")

AWS_STORAGE_BUCKET_NAME_ANALYTICS='{env}-analytics'.format(env=SMS_APP_ENV)

EMAIL_FROM_ADDRESS = 'noreply@epfl.ch'
EMAIL_TO_ADDRESSES = ['edx-monitor@groupes.epfl.ch']
